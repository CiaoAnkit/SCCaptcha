---
env:
  CAPA_SAVE_WORKSPACE: 'True'
jobs:
  binja-tests:
    env:
      BN_SERIAL: ${{ secrets.BN_SERIAL }}
    name: Binary Ninja tests for ${{ matrix.python-version }}
    needs: [tests]
    runs-on: ubuntu-20.04
    steps:
      -       # do only run if BN_SERIAL is available, have to do this in every step, see https://github.com/orgs/community/discussions/26726#discussioncomment-3253118
if: ${{ env.BN_SERIAL != 0 }}
        name: Checkout capa with submodules
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
        with:
          submodules: recursive
      - if: ${{ env.BN_SERIAL != 0 }}
        name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c
        with:
          python-version: ${{ matrix.os }}0
      - if: ${{ env.BN_SERIAL != 0 }}
        name: Install pyyaml
        run: sudo apt-get install -y libyaml-dev
      - if: ${{ env.BN_SERIAL != 0 }}
        name: Install capa
        run: pip install -e .[dev]
      - if: ${{ env.BN_SERIAL != 0 }}
        name: install Binary Ninja
        run: |
        mkdir ./.github/binja curl "https://raw.githubusercontent.com/Vector35/binaryninja-api/6812c97/scripts/download_headless.py" -o ./.github/binja/download_headless.py python ./.github/binja/download_headless.py --serial ${{ env.BN_SERIAL }} --output .github/binja/BinaryNinja-headless.zip unzip .github/binja/BinaryNinja-headless.zip -d .github/binja/ python .github/binja/binaryninja/scripts/install_api.py --install-on-root --silent
      - # save workspaces to speed up testing
env:
          BN_LICENSE: ${{ secrets.BN_LICENSE }}
        if: ${{ env.BN_SERIAL != 0 }}
        name: Run tests
        run: pytest -v tests/test_binja_features.py
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.11"]
  changelog_format:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout capa
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      # The sync GH action in capa-rules relies on a single '- *$' in the CHANGELOG file
    - name: Ensure CHANGELOG has '- *$'
        run: |
        number=$(grep '\- *
  code_style:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout capa
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      - name: Set up Python 3.11
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: pip install -e .[dev]
      - name: Lint with ruff
        run: pre-commit run ruff
      - name: Lint with isort
        run: pre-commit run isort --show-diff-on-failure
      - name: Lint with black
        run: pre-commit run black --show-diff-on-failure
      - name: Lint with flake8
        run: pre-commit run flake8 --hook-stage manual
      - name: Check types with mypy
        run: pre-commit run mypy --hook-stage manual
  ghidra-tests:
    name: Ghidra tests for ${{ matrix.python-version }}
    needs: [tests]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout capa with submodules
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
        with:
          submodules: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up Java ${{ matrix.os }}0
        uses: actions/setup-java@387ac29b308b003ca37ba93a6cab5eb57c8f5f93
        with:
          distribution: temurin
          java-version: ${{ matrix.java-version }}
      - name: Install Ghidra ${{ matrix.ghidra-version }}
        run: |
        mkdir ./.github/ghidra wget "https://github.com/NationalSecurityAgency/ghidra/releases/download/Ghidra_${{ matrix.ghidra-version }}_build/ghidra_${{ matrix.ghidra-version }}_${{ matrix.public-version }}.zip" -O ./.github/ghidra/ghidra_${{ matrix.ghidra-version }}_PUBLIC.zip unzip .github/ghidra/ghidra_${{ matrix.ghidra-version }}_PUBLIC.zip -d .github/ghidra/
      - name: Install Ghidrathon
        run: >-
          |
        mkdir ./.github/ghidrathon wget "https://github.com/mandiant/Ghidrathon/releases/download/v${{ matrix.ghidrathon-version }}/Ghidrathon-v${{ matrix.ghidrathon-version}}.zip" -O ./.github/ghidrathon/ghidrathon-v${{ matrix.python-version }}0.zip unzip .github/ghidrathon/ghidrathon-v${{ matrix.ghidrathon-version }}.zip -d .github/ghidrathon/ python -m pip install -r .github/ghidrathon/requirements.txt python .github/ghidrathon/ghidrathon_configure.py $(pwd)/.github/ghidra/ghidra_${{ matrix.ghidra-version }}_PUBLIC
          unzip .github/ghidrathon/Ghidrathon-v${{ matrix.ghidrathon-version }}.zip -d .github/ghidra/ghidra_${{ matrix.ghidra-version }}_PUBLIC/Ghidra/Extensions
      - name: Install pyyaml
        run: sudo apt-get install -y libyaml-dev
      - name: Install capa
        run: pip install -e .[dev]
      - name: Run tests
        run: |
          mkdir ./.github/ghidra/project
          .github/ghidra/ghidra_${{ matrix.ghidra-version }}_PUBLIC/support/analyzeHeadless .github/ghidra/project ghidra_test -Import ./tests/data/mimikatz.exe_ -ScriptPath ./tests/ -PostScript test_ghidra_features.py > ../output.log
          cat ../output.log
          exit_code=$(cat ../output.log | grep exit | awk '{print $NF}')
          exit $exit_code
    strategy:
      fail-fast: false
      matrix:
        ghidra-version: [ master ]0
        ghidrathon-version: ["4.0.0"]
        java-version: ["17"]
        public-version: ["PUBLIC_20240130"]
        python-version: ["3.8", "3.11"]
  rule_linter:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout capa with submodules
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
        with:
          submodules: recursive
      # use latest available python to take advantage of best performance
    - name: Set up Python 3.11
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c
        with:
          python-version: '3.11'
      - name: Install capa
        run: pip install -e .[dev]
      - name: Run rule linter
        run: python scripts/lint.py rules/
  tests:
    name: Tests in ${{ matrix.python-version }} on $vscode-yaml-sort.helm.1
    needs: [code_style, rule_linter]
    runs-on: $vscode-yaml-sort.helm.2
    steps:
      - name: Checkout capa with submodules
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
        with:
          submodules: recursive
      - name: Set up Python $vscode-yaml-sort.helm.3
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c
        with:
          python-version: ${{ matrix.python-version }}
      - if: matrix.os == 'ubuntu-20.04'
        name: Install pyyaml
        run: sudo apt-get install -y libyaml-dev
      - name: Install capa
        run: pip install -e .[dev]
      - name: Run tests (fast)
        run: pre-commit run pytest-fast --all-files --hook-stage manual
      - name: Run tests
        # this set of tests runs about 80% of the cases in 20% of the time,
      # and should catch most errors quickly.
      run: pytest -v tests/
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            python-version: '3.8'
          - os: ubuntu-20.04
            python-version: '3.9'
          # on Ubuntu run these as well
          - os: ubuntu-20.04
            python-version: '3.10'
        os: [ubuntu-20.04, windows-2019, macos-11]
        # across all operating systems
        python-version: ["3.8", "3.11"]
name: CI
'on':
  pull_request:
    branches: vscode-yaml-sort.array.1
  push:
    branches: [ master ]
permissions: read-all CHANGELOG.md | wc -l)
        if [ $number != 1 ]; then exit 1; fi

  code_style:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout capa
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      - name: Set up Python 3.11
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: pip install -e .[dev]
      - name: Lint with ruff
        run: pre-commit run ruff
      - name: Lint with isort
        run: pre-commit run isort --show-diff-on-failure
      - name: Lint with black
        run: pre-commit run black --show-diff-on-failure
      - name: Lint with flake8
        run: pre-commit run flake8 --hook-stage manual
      - name: Check types with mypy
        run: pre-commit run mypy --hook-stage manual
  ghidra-tests:
    name: Ghidra tests for ${{ matrix.python-version }}
    needs: [tests]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout capa with submodules
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
        with:
          submodules: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up Java ${{ matrix.os }}0
        uses: actions/setup-java@387ac29b308b003ca37ba93a6cab5eb57c8f5f93
        with:
          distribution: temurin
          java-version: ${{ matrix.java-version }}
      - name: Install Ghidra ${{ matrix.ghidra-version }}
        run: vscode-yaml-sort.block.2 wget "https://github.com/NationalSecurityAgency/ghidra/releases/download/Ghidra_${{ matrix.ghidra-version }}_build/ghidra_${{ matrix.ghidra-version }}_${{ matrix.public-version }}.zip" -O ./.github/ghidra/ghidra_${{ matrix.ghidra-version }}_PUBLIC.zip unzip .github/ghidra/ghidra_${{ matrix.ghidra-version }}_PUBLIC.zip -d .github/ghidra/
      - name: Install Ghidrathon
        run: >-
          vscode-yaml-sort.block.3 wget "https://github.com/mandiant/Ghidrathon/releases/download/v${{ matrix.ghidrathon-version }}/Ghidrathon-v${{ matrix.ghidrathon-version}}.zip" -O ./.github/ghidrathon/ghidrathon-v${{ matrix.python-version }}0.zip unzip .github/ghidrathon/ghidrathon-v${{ matrix.ghidrathon-version }}.zip -d .github/ghidrathon/ python -m pip install -r .github/ghidrathon/requirements.txt python .github/ghidrathon/ghidrathon_configure.py $(pwd)/.github/ghidra/ghidra_${{ matrix.ghidra-version }}_PUBLIC
          unzip .github/ghidrathon/Ghidrathon-v${{ matrix.ghidrathon-version }}.zip -d .github/ghidra/ghidra_${{ matrix.ghidra-version }}_PUBLIC/Ghidra/Extensions
      - name: Install pyyaml
        run: sudo apt-get install -y libyaml-dev
      - name: Install capa
        run: pip install -e .[dev]
      - name: Run tests
        run: |
          mkdir ./.github/ghidra/project
          .github/ghidra/ghidra_${{ matrix.ghidra-version }}_PUBLIC/support/analyzeHeadless .github/ghidra/project ghidra_test -Import ./tests/data/mimikatz.exe_ -ScriptPath ./tests/ -PostScript test_ghidra_features.py > ../output.log
          cat ../output.log
          exit_code=$(cat ../output.log | grep exit | awk '{print $NF}')
          exit $exit_code
    strategy:
      fail-fast: false
      matrix:
        ghidra-version: [ master ]0
        ghidrathon-version: ["4.0.0"]
        java-version: ["17"]
        public-version: ["PUBLIC_20240130"]
        python-version: ["3.8", "3.11"]
  rule_linter:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout capa with submodules
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
        with:
          submodules: recursive
      # use latest available python to take advantage of best performance
    - name: Set up Python 3.11
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c
        with:
          python-version: '3.11'
      - name: Install capa
        run: pip install -e .[dev]
      - name: Run rule linter
        run: python scripts/lint.py rules/
  tests:
    name: Tests in ${{ matrix.python-version }} on $vscode-yaml-sort.helm.1
    needs: [code_style, rule_linter]
    runs-on: $vscode-yaml-sort.helm.2
    steps:
      - name: Checkout capa with submodules
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
        with:
          submodules: recursive
      - name: Set up Python $vscode-yaml-sort.helm.3
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c
        with:
          python-version: ${{ matrix.python-version }}
      - if: matrix.os == 'ubuntu-20.04'
        name: Install pyyaml
        run: sudo apt-get install -y libyaml-dev
      - name: Install capa
        run: pip install -e .[dev]
      - name: Run tests (fast)
        run: pre-commit run pytest-fast --all-files --hook-stage manual
      - name: Run tests
        # this set of tests runs about 80% of the cases in 20% of the time,
      # and should catch most errors quickly.
      run: pytest -v tests/
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            python-version: '3.8'
          - os: ubuntu-20.04
            python-version: '3.9'
          # on Ubuntu run these as well
          - os: ubuntu-20.04
            python-version: '3.10'
        os: [ubuntu-20.04, windows-2019, macos-11]
        # across all operating systems
        python-version: ["3.8", "3.11"]
name: CI
'on':
  pull_request:
    branches: vscode-yaml-sort.array.1
  push:
    branches: [ master ]
permissions: read-all